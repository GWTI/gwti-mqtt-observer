org: landabear16
app: mqtt
service: gwti-mqtt-observer
frameworkVersion: '4'

provider:
  name: aws
  runtime: python3.9
  region: ${env:AWS_DEFAULT_REGION, 'eu-west-2'}
  stage: ${opt:stage, 'development'}
  deploymentBucket:
    name: mqtt-obs-sls-${self:provider.region}-${self:provider.stage}-${env:AWS_ACCOUNT_ID}
  environment:
    STAGE: ${self:provider.stage}
    OBSERVER_DATA_TABLE_NAME: ${file(./terraform/terraform-state-${self:provider.stage}.json):observer_zip_table_name}
    SEND_TO_TARGET_SERVER_QUEUE: ${file(./terraform/terraform-state-${self:provider.stage}.json):send_on_to_target_server_queue_url}
    DEVKEY_CACHE_TABLE_NAME: ${file(./terraform/terraform-state-${self:provider.stage}.json):devkey_cache_name}
    EY_FORK_MQTT_TOPIC: ey/observer/${self:provider.stage}

functions:
  csvToJson:
    handler: src/csvToJson.lambda_handler
    timeout: 300
    events:
      # - iot:
      #     sql: "SELECT * FROM 'observer/${self:provider.stage}/#'"
      - iot:
          sql: "SELECT * FROM 'ey/observer/${self:provider.stage}/#'"
    role: ${file(./terraform/terraform-state-${self:provider.stage}.json):observer_role_arn}
  
  observerMNPHandler:
    handler: src/observer_m_no_process.lambda_handler
    timeout: 300
    events:
      - iot:
          sql: "SELECT * FROM 'observer-m/np/${self:provider.stage}/#'"
    role: ${file(./terraform/terraform-state-${self:provider.stage}.json):observer_role_arn}
    
  forkEyDataToEyStream:
    handler: src/forkEyDataToEyStream.lambda_handler
    timeout: 300
    events:
      - iot:
          sql: "SELECT * FROM 'ey/observer/${self:provider.stage}/#'"
    role: ${file(./terraform/terraform-state-${self:provider.stage}.json):ey_fork_observer_data_role_arn}

  sendObserverData:
    handler: src/sendObserverData.lambda_handler
    timeout: 60
    events:
      - sqs: ${file(./terraform/terraform-state-${self:provider.stage}.json):send_on_to_target_server_arn}
    role: ${file(./terraform/terraform-state-${self:provider.stage}.json):observer_data_role_arn}

plugins:
  - serverless-python-requirements

custom:
  pythonRequirements:
    dockerizePip: non-linux
    slim: true
    strip: true
    zip: false
    slimPatterns:
      - '**/*.pyc'
      - '**/*.pyo'
      - '**/tests/**'
      - '**/test/**'
      - '**/__pycache__/**'

package:
  individually: true
  exclude:
    - terraform/**
    - setup-scripts/**
    - bin/**
    - '*.log'
    - README.md
    - package-lock.json
    - package.json
    - webpack.config.js
    - node_modules/**